import { NextRequest, NextResponse } from 'next/server';
import { MongoClient } from 'mongodb';
import { GoogleGenerativeAI } from '@google/generative-ai';

/**
 * API endpoint to generate and save interview feedback using Google Gemini
 * 
 * This endpoint:
 * 1. Receives questions, answers, and user information
 * 2. Calls Google Gemini API to analyze the interview and generate feedback
 * 3. Saves feedback to Feedback collection in MongoDB Atlas
 * 4. Returns the structured feedback
 */
export async function POST(request: NextRequest) {
  let client: MongoClient | null = null;
  
  try {
    const { sessionId, questions, answers, userInfo } = await request.json();
    
    console.log('📊 SaveFeedback API called for:', { 
      sessionId, 
      questionsCount: questions?.length, 
      answersCount: answers?.length 
    });

    // Validate required fields
    if (!sessionId || !questions || !answers || !userInfo) {
      console.log('❌ Missing required fields');
      return NextResponse.json(
        { error: 'Missing required fields: sessionId, questions, answers, userInfo' },
        { status: 400 }
      );
    }

    // Initialize Google Gemini
    const genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY || '');
    const model = genAI.getGenerativeModel({ model: 'gemini-pro' });

    console.log('✅ Google Gemini initialized for feedback generation');

    // Generate feedback using Gemini
    const feedback = await generateFeedbackWithGemini(model, questions, answers, userInfo);
    
    console.log('✅ Feedback generated by Gemini');

    // Connect to MongoDB Atlas
    const mongoUri = process.env.MONGODB_URI;
    if (!mongoUri) {
      console.log('❌ MongoDB URI not configured');
      return NextResponse.json(
        { error: 'Database connection not configured' },
        { status: 500 }
      );
    }

    client = new MongoClient(mongoUri);
    await client.connect();
    console.log('✅ Connected to MongoDB Atlas');

    const db = client.db('interview_system');
    const collection = db.collection('feedback');

    // Create feedback document
    const feedbackDocument = {
      sessionId,
      userInfo,
      questions,
      answers,
      feedback,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    // Insert or update feedback
    const result = await collection.findOneAndUpdate(
      { sessionId },
      { $set: feedbackDocument },
      { upsert: true, returnDocument: 'after' }
    );

    console.log('✅ Feedback saved to database');

    return NextResponse.json({
      success: true,
      message: 'Feedback generated successfully',
      sessionId,
      feedback: feedback
    });

  } catch (error) {
    console.error('❌ Error generating feedback:', error);
    return NextResponse.json(
      { 
        error: 'Failed to generate feedback',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  } finally {
    if (client) {
      await client.close();
      console.log('🔌 MongoDB connection closed');
    }
  }
}

/**
 * Generate interview feedback using Google Gemini AI
 */
async function generateFeedbackWithGemini(model: any, questions: any[], answers: any[], userInfo: any) {
  try {
    // Prepare the interview data for analysis
    const interviewData = questions.map((q, index) => ({
      question: q.text,
      answer: answers[index]?.answer || 'No answer provided',
      questionType: q.type,
      difficulty: q.difficulty,
      category: q.category
    }));

    const prompt = `
You are an expert interview coach and career advisor. Analyze the following interview and provide comprehensive, constructive feedback.

**Candidate Profile:**
- Name: ${userInfo.name}
- Target Role: ${userInfo.role}
- Interview Type: ${userInfo.interviewType}
- Skill Level: ${userInfo.skillLevel}
- Experience: ${userInfo.experience || 'Not specified'}

**Interview Data:**
${interviewData.map((item, index) => `
Q${index + 1} (${item.questionType}, ${item.difficulty}): ${item.question}
Answer: ${item.answer}
`).join('\n')}

**Analysis Requirements:**
1. Provide an overall score (1-10) based on the candidate's performance
2. Identify 3-5 key strengths demonstrated during the interview
3. Identify 3-5 areas for improvement
4. Provide 3-5 specific, actionable recommendations
5. Write a brief summary of the candidate's performance
6. Consider the role requirements and skill level expectations

**Response Format:**
Return ONLY a JSON object with the following structure:
{
  "overallScore": number (1-10),
  "summary": "Brief summary of performance",
  "strengths": ["strength1", "strength2", "strength3"],
  "weaknesses": ["weakness1", "weakness2", "weakness3"],
  "recommendations": ["recommendation1", "recommendation2", "recommendation3"],
  "detailedAnalysis": {
    "technicalSkills": "Analysis of technical performance",
    "communication": "Analysis of communication skills",
    "problemSolving": "Analysis of problem-solving approach",
    "experience": "Analysis of relevant experience"
  }
}

Be constructive, specific, and professional in your feedback. Focus on actionable insights that will help the candidate improve.

Return ONLY the JSON object, no additional text.
`;

    console.log('📝 Sending feedback prompt to Gemini...');

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    console.log('📋 Raw Gemini feedback response:', text.substring(0, 200) + '...');

    // Parse JSON response
    let feedback;
    try {
      // Clean the response (remove any markdown formatting)
      const cleanText = text.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      feedback = JSON.parse(cleanText);
    } catch (parseError) {
      console.error('❌ Failed to parse Gemini feedback response:', parseError);
      console.log('Raw response:', text);
      
      // Fallback: generate feedback manually
      feedback = generateFallbackFeedback(questions, answers, userInfo);
    }

    // Validate feedback structure
    if (!feedback || typeof feedback !== 'object') {
      console.log('⚠️ Gemini response is not a valid object, using fallback');
      feedback = generateFallbackFeedback(questions, answers, userInfo);
    }

    // Ensure required fields exist
    feedback = {
      overallScore: feedback.overallScore || 7,
      summary: feedback.summary || 'Interview completed successfully. The candidate demonstrated good communication skills and relevant experience.',
      strengths: feedback.strengths || ['Good communication skills', 'Relevant experience', 'Professional demeanor'],
      weaknesses: feedback.weaknesses || ['Could provide more specific examples', 'Technical depth could be improved'],
      recommendations: feedback.recommendations || ['Practice with more technical questions', 'Prepare specific examples', 'Research the company and role'],
      detailedAnalysis: feedback.detailedAnalysis || {
        technicalSkills: 'Demonstrated basic understanding of the role requirements.',
        communication: 'Clear and articulate in responses.',
        problemSolving: 'Showed logical thinking approach.',
        experience: 'Relevant background for the position.'
      }
    };

    console.log('✅ Feedback processed successfully');
    return feedback;

  } catch (error) {
    console.error('❌ Error in generateFeedbackWithGemini:', error);
    return generateFallbackFeedback(questions, answers, userInfo);
  }
}

/**
 * Generate fallback feedback if Gemini fails
 */
function generateFallbackFeedback(questions: any[], answers: any[], userInfo: any) {
  const answeredQuestions = answers.filter(a => a.answer && a.answer.trim().length > 0);
  const answerRate = answeredQuestions.length / questions.length;
  
  // Calculate basic score based on answer rate and content
  let baseScore = Math.round(answerRate * 8) + 2; // 2-10 range
  if (baseScore < 3) baseScore = 3;
  if (baseScore > 10) baseScore = 10;

  const feedback = {
    overallScore: baseScore,
    summary: `Interview completed with ${answeredQuestions.length}/${questions.length} questions answered. The candidate demonstrated ${answerRate > 0.7 ? 'good' : 'adequate'} communication skills and showed interest in the ${userInfo.role} role.`,
    strengths: [
      'Completed the interview process',
      'Demonstrated communication skills',
      'Showed interest in the role',
      'Provided responses to questions'
    ],
    weaknesses: [
      answerRate < 0.8 ? 'Some questions were not fully answered' : 'Could provide more detailed examples',
      'Technical depth could be improved',
      'Could benefit from more specific examples'
    ],
    recommendations: [
      'Practice answering interview questions out loud',
      'Prepare specific examples from past experience',
      'Research common questions for this role',
      'Practice explaining technical concepts clearly'
    ],
    detailedAnalysis: {
      technicalSkills: `Based on the ${userInfo.interviewType} interview, the candidate showed ${answerRate > 0.7 ? 'good' : 'basic'} understanding of the role requirements.`,
      communication: 'Clear and professional communication throughout the interview.',
      problemSolving: 'Demonstrated logical thinking in responses.',
      experience: `Relevant background for the ${userInfo.role} position at ${userInfo.skillLevel} level.`
    }
  };

  console.log('🔄 Generated fallback feedback');
  return feedback;
}

/**
 * GET endpoint to retrieve feedback by sessionId
 */
export async function GET(request: NextRequest) {
  let client: MongoClient | null = null;
  
  try {
    const { searchParams } = new URL(request.url);
    const sessionId = searchParams.get('sessionId');
    
    console.log('📖 GetFeedback API called for sessionId:', sessionId);

    if (!sessionId) {
      return NextResponse.json(
        { error: 'SessionId is required' },
        { status: 400 }
      );
    }

    // Connect to MongoDB Atlas
    const mongoUri = process.env.MONGODB_URI;
    if (!mongoUri) {
      return NextResponse.json(
        { error: 'Database connection not configured' },
        { status: 500 }
      );
    }

    client = new MongoClient(mongoUri);
    await client.connect();

    const db = client.db('interview_system');
    const collection = db.collection('feedback');

    // Find feedback by sessionId
    const feedbackData = await collection.findOne({ sessionId });

    if (!feedbackData) {
      return NextResponse.json(
        { error: 'Feedback not found' },
        { status: 404 }
      );
    }

    console.log('✅ Feedback retrieved');

    return NextResponse.json({
      success: true,
      feedback: feedbackData.feedback,
      userInfo: feedbackData.userInfo,
      questions: feedbackData.questions,
      answers: feedbackData.answers
    });

  } catch (error) {
    console.error('❌ Error retrieving feedback:', error);
    return NextResponse.json(
      { 
        error: 'Failed to retrieve feedback',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  } finally {
    if (client) {
      await client.close();
    }
  }
}